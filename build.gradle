plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.tabcorp'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-security'
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-oauth2-client
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-oauth2-resource-server
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-oauth2-jose
	implementation 'org.springframework.security:spring-security-oauth2-jose'


	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	//implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.0.4' // For Spring WebFlux

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.flywaydb:flyway-core'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}


jacocoTestReport {
	dependsOn test // Ensure tests run before generating the report
	reports {
		html.required.set(true)// Generate a human-readable HTML report
		csv.required.set(false)
	}
	// Exclude classes or packages
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com.tabcorp.saleReport.SaleReportApplication.class",
					"com.tabcorp.saleReport.exception.GlobalExceptionHandler",
					"**/configuration/*"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'

			excludes = [
					'com.tabcorp.saleReport.exception.GlobalExceptionHandler',
					'com.tabcorp.saleReport.SaleReportApplication',
					'com.tabcorp.saleReport.configuration.SecurityConfig'
			]
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80 // Require at least 80% line coverage
			}
		}
	}
}

tasks.check {
	dependsOn jacocoTestCoverageVerification // Fail the build if coverage is below threshold
}
